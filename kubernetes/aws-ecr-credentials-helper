#This cronjob will create a secret name regcred at your namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: role-full-access-to-secrets
  namespace: NAMESPACE
rules:
- apiGroups:
  - ""
  resourceNames:
  - regcred
  resources:
  - secrets
  verbs:
  - delete
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aws-role-binding
  namespace: NAMESPACE
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-full-access-to-secrets
subjects:
- kind: ServiceAccount
  name: aws-sa
  namespace: NAMESPACE
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-sa
  namespace: NAMESPACE
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-registry-helper
  namespace: NAMESPACE
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - command:
            - /bin/sh
            - -c
            - |-
              ECR_TOKEN=`aws ecr get-login-password --region ${AWS_REGION}`
              NAMESPACE_NAME=NAMESPACE
              kubectl delete secret --ignore-not-found $DOCKER_SECRET_NAME -n $NAMESPACE_NAME
              kubectl create secret docker-registry $DOCKER_SECRET_NAME \
              --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
              --docker-username=AWS \
              --docker-password="${ECR_TOKEN}" \
              --namespace=$NAMESPACE_NAME
              echo "Secret was successfully updated at $(date)"
            envFrom:
            - secretRef:
                name: ecr-registry-helper-secrets
            - configMapRef:
                name: ecr-registry-helper-cm
            image: odaniait/aws-kubectl:latest
            imagePullPolicy: IfNotPresent
            name: ecr-registry-helper
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: aws-sa
          serviceAccountName: aws-sa
          terminationGracePeriodSeconds: 30
  schedule: 0 */10 * * *
---
apiVersion: v1
data:
  AWS_REGION: eu-west-1
  DOCKER_SECRET_NAME: regcred
kind: ConfigMap
metadata:
  name: ecr-registry-helper-cm
  namespace: NAMESPACE
---
apiVersion: v1
stringData:
  AWS_ACCESS_KEY_ID: xxxxxxxx
  AWS_ACCOUNT: "yyyyyyyyyyyyy"
  AWS_SECRET_ACCESS_KEY: zzzzzzzzzz
kind: Secret
metadata:
  name: ecr-registry-helper-secrets
  namespace: NAMESPACE
